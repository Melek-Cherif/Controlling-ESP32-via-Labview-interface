#include <WiFi.h>
#include <ESPmDNS.h>
#include <Esp32WifiManager.h>

// define I/O pins
# define button 12
# define LED 13
# define LED_2 14 

#define WIFI_NETWORK "Atl.Electrique"
#define WIFI_PASSWORD "Atl.ELC2021"

//#define WIFI_NETWORK "CORAIL-GUEST"
//#define WIFI_PASSWORD "CORAIL-GUEST"

int lastState = HIGH;
int currentState;

String char_gpio[10] = {"13", "12", "14", "27", "26", "25", "33", "32", "35"};
int int_gpio[10] = {LED, button, LED_2, 27, 26, 25, 33, 32, 35};

bool button_stat = false;
bool LED_stat = false;
String On = "son",
              Off = "soff";
String read_button = "read button";

String message_readed = "";
int i = 0;
int port = 8888;

int pin = 0;

WiFiServer server(port);      // Creates a server that listens for incoming connections on the specified port

void connectToWifi()
{
  Serial.print("Connecting to Wifi");
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_NETWORK, WIFI_PASSWORD);

  unsigned long startAttemptTime = millis();

  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(100);
  }

  if (!MDNS.begin("esp32"))
  {
    Serial.println("Error starting mDNS");
    return;
  }

  Serial.println(WiFi.localIP());
  server.begin();
}


void checkButton()
{
  currentState = digitalRead(button);

  if (lastState == LOW && currentState == HIGH)
    Serial.println("Button pressed");
  LED_stat = true;

  lastState = currentState;
}


/*void LED_CONTROL(int pin)
{
  if (strcmp(message_readed, conCatON(On, char_gpio[pin])) == 0)
  {
    digitalWrite(LED,HIGH);
  }
  else if (strcmp(message_readed, conCatOFF(Off, char_gpio[pin])) == 0)
  {
    digitalWrite(LED,LOW);
  }
}*/

/*String numberToString (int number)
  {
  char snum[5];

  // convert 123 to string [buf]
  itoa(number, snum, 10);

  // print our string
  return(snum);
  }*/

void setup()
{
  // put your setup code here, to run once:
  pinMode(button, INPUT_PULLUP);
  pinMode(LED, OUTPUT);
  pinMode(LED_2, OUTPUT);
  pinMode(int_gpio[6], OUTPUT);

  Serial.begin(9600);
  connectToWifi();
  // Start listening for clients
  Serial.print("Open Telnet and connect to IP:");
  Serial.print(WiFi.localIP());
  Serial.print(" on port ");
  Serial.println(port);

}


void loop()
{
  // put your main code here, to run repeatedly:
  /*currentState = digitalRead(button);

    if (lastState == LOW && currentState == HIGH)
    Serial.println("Button pressed");

    lastState = currentState;*/

  // listen for incoming clients
  WiFiClient client = server.available();

  if (client) {
    //Client handling code
    if (client.connected())
    {
      Serial.println("Client Connected\r\n");
    }

    while (client.connected())
    {
      //checkButton();
      message_readed = "";
      i = 0;
      while (client.available() > 0)
      {
        // read data from the connected client
        char client_message = client.read();
        if (client_message != 0)
        {
          message_readed += client_message;
        }
        //message_readed[i] = '\0';
      }

      if (message_readed != "")
      {
        Serial.print(message_readed);
        Serial.write("\n");
        Serial.println(separateString(message_readed));
        Serial.println(separatePin(message_readed));
        /*if (strcmp(message_readed, conCat(Off,char_gpio[0])) == 0)
          {
          LED_OFF(int_gpio[0]);
          }
          else if (strcmp(message_readed, strcat(On,char_gpio[0])) == 0)
          {
          LED_ON(int_gpio[0]);
          }*/

        /*if (message_readed == (On + char_gpio[0]))
        {
          
          digitalWrite(int_gpio[0], HIGH);
        }
        else if (message_readed == (Off + char_gpio[0]))
        {
          digitalWrite(int_gpio[0],LOW);
        }*/        

        //Serial.print((On + char_gpio[0]));
        pin = separatePin(message_readed);
        if (separateString(message_readed) == On)
        {
          Serial.print("SON readed");
          if (separatePin(message_readed) == int_gpio[0])
          {
            digitalWrite(pin, HIGH);
            Serial.println("LED ON");
          }

          else if (separatePin(message_readed) == int_gpio[2])
          {
            digitalWrite(int_gpio[2], HIGH);
          }
          
          else if (separatePin(message_readed) == int_gpio[6])
          {
            digitalWrite(int_gpio[6], HIGH);
          }
          
        }
        else if (separateString(message_readed) == Off )
        {
          if (separatePin(message_readed) == int_gpio[0]) 
          {
            digitalWrite(int_gpio[0],LOW);
          }
          
          else if (separatePin(message_readed) == int_gpio[2]) 
          {
            digitalWrite(int_gpio[2],LOW);
          }
          
          else if (separatePin(message_readed) == int_gpio[6]) 
          {
            digitalWrite(int_gpio[6],LOW);
          }
        }

        /*if (message_readed == (On + char_gpio[6]))
        {
          digitalWrite(int_gpio[6], HIGH);
        }
        else if (message_readed == (Off + char_gpio[6]))
        {
          digitalWrite(int_gpio[6],LOW);
        } 
        
        if (message_readed == read_button)
        {

          if (digitalRead(button) == 0 )
          {
            Serial.println("button pressed");
            client.write("button pressed");
          }
          else
          {
            Serial.println("button non pressed");
            client.write("button non pressed");
          }
        }*/
        message_readed = "";
        //sprintf(message_readed, "");
      }


      delay(10); //small delay between polling
      //Serial.println("finish 10ms");

      //send data to the connected client
      //while (Serial.available() > 0)
      /*
        char server_message;

        if (LED_stat == true)
        {
          server_message = 1;
          client.write(server_message);
        }
        else
        {
          server_message = 0;
          client.write(server_message);
        }*/

      //Serial.println("finish send data");
    }

    //close the connection to the client
    client.stop();
    Serial.println("Client disconnected");
    LED_stat = false;
    digitalWrite(LED, LOW);
    digitalWrite(int_gpio[2], LOW);
  }
}

String separateString(String msg)
{
  String result = "";
  for (int i = 0; i < msg.length() ; i++)
  {
    if(msg[i] == ' ')
    {
      return result;
    }
    result+= msg[i];
  }
}

String Inverse(String msg)
{
  String str;
  for (int i = msg.length(); i > 0 ; i--)
  {
    str += msg[i];
  }
  msg = str;
  return msg;
}

int separatePin(String msg)
{
  String str = "";
  String result = "";
  String str1 = "";
  for (int i = msg.length(); i > 0 ; i--)
  {
    str+= msg[i];
    if(msg[i] == ' ')
    {
      str1 = Inverse(str);
    }
  }
  //Serial.print(result);
  for(int j = 1; j < str.length()-1; j++)
  {
    result +=str1[j];
  }
  return (result.toInt());
}